#!/usr/bin/env ruby
require 'rubygems'
gem 'gtk2applib', '~> 4.1.0'
require 'gtk2applib/gtk2_app'

Gtk2App.init( {
	:name		=> 'Ruby-Gnome CheckBoxes',
 	:tooltip	=> 'CheckBoxes',
	:FILE		=> __FILE__,
	} )

require 'find'
require 'gtk2checkboxes/gtk2checkboxes.rb'
require 'gtk2applib/gtk2_dialogs_entry.rb'
require 'gtk2applib/gtk2_dialogs_choose_tags.rb'
about = {
        'authors'       => ['carlosjhr64@gmail.com'],
        'website'       => 'http://ruby-gnome-apps.blogspot.com/search/label/CheckBoxes',
        'website-label' => 'Ruby-Gnome CheckBoxes Blog',
        'license'       => 'GPL',
        'copyright'     => '2009-Dec-23',
}
Gtk2App.main_window(about) do |window|
  include Configuration

  dialogs = Gtk2App::Dialogs.new
  empty = true
  notebook = Gtk::Notebook.new
  tabs = {}

  notebook_append_page = proc {|tab|
    fn = "#{UserSpace::DIRECTORY}/#{tab}.txt"
    tabs[tab] = page = CheckBoxes::Page.new(fn,dialogs)
    label = Gtk::Label.new(tab)
    label.width_request = TAB_WIDTH if TAB_WIDTH
    notebook.append_page(page,label)
    notebook.set_tab_label_packing(page,false,false,Gtk::PACK_START)
    empty = false if empty
  }

  Find.find(UserSpace::DIRECTORY){|fn|
    Find.prune if !(fn==UserSpace::DIRECTORY) && File.directory?(fn)
    if fn=~/\/(\w+)\.txt$/ then
      notebook_append_page.call($1)
    end
  }

  if empty then
    notebook_append_page.call(DEFAULT_TAB)
  end

  # Menu Options
  Gtk2App.app.menu.append( Gtk::SeparatorMenuItem.new )
  Gtk2App.app.menu.append_menu_item('_Add Tab'){
    tab = dialogs.entry(TABNAME_ENTRY_MESSAGE,TABNAME_ENTRY_OPTIONS).strip
    if tab=~/^\w+$/ && !tabs[tab] then
      notebook_append_page.call(tab)
      notebook.show_all
    else
      dialogs.quick_message(TABNAME_ERROR_MESSAGE,TABNAME_ERROR_OPTIONS)
    end
  }

  Gtk2App.app.menu.append_menu_item('_Delete Tab'){
    tab = dialogs.choose_tags(tabs.keys.sort,TABNAME_CHOOSE_OPTIONS)
    if tab && tab = tab.shift then
      tabs[tab].delete # delete the tab page
      tabs.delete(tab) # delete the tab key
    end
  }

  window.add( Gtk2App::ScrolledWindow.new(notebook) )
  window.signal_connect('destroy'){
    alloc = window.allocation
    GUI[:window_size]=[alloc.width,alloc.height]
    GUI[:notebook_page]=notebook.page
  }

  Gtk.timeout_add(SET_PAGE_EVENT){
    notebook.set_page(GUI[:notebook_page]) if GUI[:notebook_page]
    false
  }
end

Gtk2App.finalize
